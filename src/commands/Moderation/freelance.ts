import {
	ChatInputCommandInteraction,
	PermissionFlagsBits,
	SlashCommandBuilder,
} from 'discord.js'
import { Command } from '@/types/bot'
import { supabase } from '@/configs/supabase'
import Logger from '@/classes/logger'

/**
 * CREATE TABLE IF NOT EXISTS freelance (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT NOT NULL,
    price INTEGER NOT NULL,
    stripe_product_id TEXT NOT NULL,
    amount_sold INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);
*/

export default {
	data: new SlashCommandBuilder()
		.setName('freelance')
		.setDescription('Manage freelance tasks')
		.addSubcommand((subcommand) =>
			subcommand
				.setName('create')
				.setDescription('Create a new freelance task')
				.addStringOption((option) =>
					option
						.setName('title')
						.setDescription('The title of the task')
						.setRequired(true),
				)
				.addStringOption((option) =>
					option
						.setName('description')
						.setDescription('The description of the task')
						.setRequired(true),
				)
				.addStringOption((option) =>
					option
						.setName('price')
						.setDescription('The price of the task')
						.setRequired(true),
				)
				.addStringOption((option) =>
					option
						.setName('stripe')
						.setDescription('The Stripe ID of the task')
						.setRequired(true),
				),
		)
		.addSubcommand((subcommand) =>
			subcommand.setName('list').setDescription('List all freelance tasks'),
		)
		.addSubcommand((subcommand) =>
			subcommand
				.setName('delete')
				.setDescription('Delete a freelance task')
				.addStringOption((option) =>
					option
						.setName('id')
						.setDescription('The ID of the task')
						.setRequired(true),
				),
		)
		.setDefaultMemberPermissions(PermissionFlagsBits.ManageGuild),

	async execute(interaction: ChatInputCommandInteraction) {
		const subcommand = interaction.options.getSubcommand()

		if (subcommand === 'create') {
			const title = interaction.options.getString('title')
			const description = interaction.options.getString('description')
			const price = interaction.options.getString('price')
			const stripe = interaction.options.getString('stripe')

			const { data, error } = await supabase.from('freelance').insert({
				name: title,
				description,
				price: parseInt(price as string),
				stripe_product_id: stripe,
			})

			if (error) {
				Logger.log('error', error.message, 'Freelance')
				return interaction.reply({
					content: 'An error occurred while creating the task',
					ephemeral: true,
				})
			}

			return interaction.reply({
				content: `Task ${title} created successfully`,
			})
		} else if (subcommand === 'list') {
			const { data, error } = await supabase.from('freelance').select()

			if (error) {
				Logger.log('error', error.message, 'Freelance')
				return interaction.reply({
					content: 'An error occurred while fetching the tasks',
					ephemeral: true,
				})
			}

			const tasks = data.map((task) => {
				return `**${task.name}** - ${task.description} - $${task.price} (ID: ${task.stripe_product_id})`
			})

			return interaction.reply({
				content: tasks.join('\n'),
			})
		} else if (subcommand === 'delete') {
			try {
				const id = interaction.options.getString('id')

				const { data, error } = await supabase
					.from('freelance')
					.delete()
					.match({ stripe_product_id: id })

				if (error) {
					Logger.log('error', error.message, 'Freelance')
					return interaction.reply({
						content: 'An error occurred while deleting the task',
						ephemeral: true,
					})
				}

				return interaction.reply({
					content: `Task ${id} deleted successfully`,
				})
			} catch (error) {
				console.error(error)
				return interaction.reply({
					content: 'An error occurred while deleting the task',
					ephemeral: true,
				})
			}
		}
	},
} as Command
