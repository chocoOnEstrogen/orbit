-- Create a table for user blacklists
CREATE TABLE IF NOT EXISTS user_blacklists (
    user_id TEXT PRIMARY KEY,
    blacklisted_tags TEXT[] DEFAULT ARRAY[]::TEXT[],
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create a table for favorite tags
CREATE TABLE IF NOT EXISTS user_favorites (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id TEXT NOT NULL,
    tag TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    UNIQUE(user_id, tag)
);

-- Create a table for booru history
CREATE TABLE IF NOT EXISTS booru_history (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id TEXT NOT NULL,
    site TEXT NOT NULL,
    tags TEXT[],
    post_url TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create a table for global blacklisted tags
CREATE TABLE IF NOT EXISTS global_blacklist (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tag TEXT NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Insert some default blacklisted tags
INSERT INTO global_blacklist (tag) VALUES
    ('gore'),
    ('scat'),
    ('young'),
    ('loli'),
    ('shota');

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger for user_blacklists
DROP TRIGGER IF EXISTS update_user_blacklists_updated_at ON user_blacklists;
CREATE TRIGGER update_user_blacklists_updated_at
    BEFORE UPDATE ON user_blacklists
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Create a table for blacklist suggestions
CREATE TABLE IF NOT EXISTS blacklist_suggestions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tag TEXT NOT NULL,
    reason TEXT,
    suggested_by TEXT,
    status TEXT NOT NULL DEFAULT 'pending',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    UNIQUE(tag, status)
);

-- Create trigger for blacklist_suggestions
DROP TRIGGER IF EXISTS update_blacklist_suggestions_updated_at ON blacklist_suggestions;
CREATE TRIGGER update_blacklist_suggestions_updated_at
    BEFORE UPDATE ON blacklist_suggestions
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Create a table for reminders
CREATE TABLE IF NOT EXISTS reminders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id TEXT NOT NULL,
    channel_id TEXT NOT NULL,
    message TEXT NOT NULL,
    remind_at TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create a table for user levels
CREATE TABLE IF NOT EXISTS user_levels (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id TEXT NOT NULL,
    xp INTEGER DEFAULT 0,
    level INTEGER DEFAULT 1,
    last_message_at TIMESTAMP WITH TIME ZONE,
    UNIQUE(user_id)
);

-- Add giveaway table
CREATE TABLE IF NOT EXISTS giveaways (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    message_id TEXT NOT NULL UNIQUE,
    channel_id TEXT NOT NULL,
    prize TEXT NOT NULL,
    winner_count INTEGER DEFAULT 1,
    host_id TEXT NOT NULL,
    ends_at TIMESTAMP WITH TIME ZONE NOT NULL,
    ended BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Freelancer table
CREATE TABLE IF NOT EXISTS freelance (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT NOT NULL,
    price INTEGER NOT NULL,
    stripe_product_id TEXT NOT NULL,
    amount_sold INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);
